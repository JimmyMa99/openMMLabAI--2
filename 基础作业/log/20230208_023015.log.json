{"env_info": "sys.platform: linux\nPython: 3.10.9 (main, Jan 11 2023, 15:21:40) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce GTX 1080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.12.1+cu102\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cu102\nOpenCV: 4.6.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.28.0+1b7d778", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\nclasses = ('balloon', )\ndata_root = 'dataset/balloon'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file='dataset/balloon/train/train_ann.json',\n        img_prefix='dataset/balloon/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='dataset/balloon/val/via_region_data.json',\n        img_prefix='dataset/balloon/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='dataset/balloon/val/via_region_data.json',\n        img_prefix='dataset/balloon/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.0002, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=10,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=30)\ncheckpoint_config = dict(interval=5)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained/mask_rcnn_r50_fpn_1x_coco_20200205-d4b0c5d6.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nfp16 = dict(loss_scale=512.0)\nwork_dir = 'mask_rcnn_30'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1295377391, "exp_name": "mask_rcnn_r50_fpn_fp16_1x_balloon.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00014, "bbox_mAP": 0.0066, "bbox_mAP_50": 0.0314, "bbox_mAP_75": 0.0005, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0013, "bbox_mAP_l": 0.0099, "bbox_mAP_copypaste": "0.0066 0.0314 0.0005 0.0000 0.0013 0.0099", "segm_mAP": 0.0294, "segm_mAP_50": 0.0708, "segm_mAP_75": 0.0115, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0018, "segm_mAP_l": 0.0538, "segm_mAP_copypaste": "0.0294 0.0708 0.0115 0.0000 0.0018 0.0538"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.0253, "bbox_mAP_50": 0.0657, "bbox_mAP_75": 0.013, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0232, "bbox_mAP_l": 0.0338, "bbox_mAP_copypaste": "0.0253 0.0657 0.0130 0.0000 0.0232 0.0338", "segm_mAP": 0.0446, "segm_mAP_50": 0.0647, "segm_mAP_75": 0.0474, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0188, "segm_mAP_l": 0.1381, "segm_mAP_copypaste": "0.0446 0.0647 0.0474 0.0000 0.0188 0.1381"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.0844, "bbox_mAP_50": 0.1349, "bbox_mAP_75": 0.078, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0573, "bbox_mAP_l": 0.1162, "bbox_mAP_copypaste": "0.0844 0.1349 0.0780 0.0000 0.0573 0.1162", "segm_mAP": 0.1104, "segm_mAP_50": 0.1393, "segm_mAP_75": 0.1331, "segm_mAP_s": 0.0034, "segm_mAP_m": 0.05, "segm_mAP_l": 0.2112, "segm_mAP_copypaste": "0.1104 0.1393 0.1331 0.0034 0.0500 0.2112"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.1854, "bbox_mAP_50": 0.2658, "bbox_mAP_75": 0.2079, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.1208, "bbox_mAP_l": 0.2447, "bbox_mAP_copypaste": "0.1854 0.2658 0.2079 0.0000 0.1208 0.2447", "segm_mAP": 0.2323, "segm_mAP_50": 0.2696, "segm_mAP_75": 0.2621, "segm_mAP_s": 0.0031, "segm_mAP_m": 0.1002, "segm_mAP_l": 0.3553, "segm_mAP_copypaste": "0.2323 0.2696 0.2621 0.0031 0.1002 0.3553"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.4008, "bbox_mAP_50": 0.5505, "bbox_mAP_75": 0.4733, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.2356, "bbox_mAP_l": 0.4899, "bbox_mAP_copypaste": "0.4008 0.5505 0.4733 0.0000 0.2356 0.4899", "segm_mAP": 0.4787, "segm_mAP_50": 0.5512, "segm_mAP_75": 0.5467, "segm_mAP_s": 0.0038, "segm_mAP_m": 0.19, "segm_mAP_l": 0.6499, "segm_mAP_copypaste": "0.4787 0.5512 0.5467 0.0038 0.1900 0.6499"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.5357, "bbox_mAP_50": 0.7415, "bbox_mAP_75": 0.6589, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4025, "bbox_mAP_l": 0.6056, "bbox_mAP_copypaste": "0.5357 0.7415 0.6589 0.0000 0.4025 0.6056", "segm_mAP": 0.6428, "segm_mAP_50": 0.7395, "segm_mAP_75": 0.736, "segm_mAP_s": 0.0048, "segm_mAP_m": 0.3614, "segm_mAP_l": 0.7489, "segm_mAP_copypaste": "0.6428 0.7395 0.7360 0.0048 0.3614 0.7489"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.5634, "bbox_mAP_50": 0.7955, "bbox_mAP_75": 0.6509, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5118, "bbox_mAP_l": 0.6176, "bbox_mAP_copypaste": "0.5634 0.7955 0.6509 0.0000 0.5118 0.6176", "segm_mAP": 0.6824, "segm_mAP_50": 0.7923, "segm_mAP_75": 0.7892, "segm_mAP_s": 0.0049, "segm_mAP_m": 0.5106, "segm_mAP_l": 0.7617, "segm_mAP_copypaste": "0.6824 0.7923 0.7892 0.0049 0.5106 0.7617"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.5748, "bbox_mAP_50": 0.8064, "bbox_mAP_75": 0.625, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5723, "bbox_mAP_l": 0.6265, "bbox_mAP_copypaste": "0.5748 0.8064 0.6250 0.0000 0.5723 0.6265", "segm_mAP": 0.6974, "segm_mAP_50": 0.8021, "segm_mAP_75": 0.7969, "segm_mAP_s": 0.0048, "segm_mAP_m": 0.59, "segm_mAP_l": 0.7722, "segm_mAP_copypaste": "0.6974 0.8021 0.7969 0.0048 0.5900 0.7722"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 2e-05, "bbox_mAP": 0.5803, "bbox_mAP_50": 0.8117, "bbox_mAP_75": 0.6409, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5693, "bbox_mAP_l": 0.6327, "bbox_mAP_copypaste": "0.5803 0.8117 0.6409 0.0000 0.5693 0.6327", "segm_mAP": 0.7029, "segm_mAP_50": 0.8073, "segm_mAP_75": 0.8025, "segm_mAP_s": 0.0048, "segm_mAP_m": 0.5875, "segm_mAP_l": 0.7779, "segm_mAP_copypaste": "0.7029 0.8073 0.8025 0.0048 0.5875 0.7779"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 2e-05, "bbox_mAP": 0.5815, "bbox_mAP_50": 0.8137, "bbox_mAP_75": 0.642, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5804, "bbox_mAP_l": 0.6336, "bbox_mAP_copypaste": "0.5815 0.8137 0.6420 0.0000 0.5804 0.6336", "segm_mAP": 0.7047, "segm_mAP_50": 0.809, "segm_mAP_75": 0.804, "segm_mAP_s": 0.0047, "segm_mAP_m": 0.6105, "segm_mAP_l": 0.7773, "segm_mAP_copypaste": "0.7047 0.8090 0.8040 0.0047 0.6105 0.7773"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 2e-05, "bbox_mAP": 0.5816, "bbox_mAP_50": 0.8141, "bbox_mAP_75": 0.6423, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5806, "bbox_mAP_l": 0.634, "bbox_mAP_copypaste": "0.5816 0.8141 0.6423 0.0000 0.5806 0.6340", "segm_mAP": 0.705, "segm_mAP_50": 0.8094, "segm_mAP_75": 0.8043, "segm_mAP_s": 0.0047, "segm_mAP_m": 0.6105, "segm_mAP_l": 0.7779, "segm_mAP_copypaste": "0.7050 0.8094 0.8043 0.0047 0.6105 0.7779"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5816, "bbox_mAP_50": 0.814, "bbox_mAP_75": 0.6423, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5806, "bbox_mAP_l": 0.634, "bbox_mAP_copypaste": "0.5816 0.8140 0.6423 0.0000 0.5806 0.6340", "segm_mAP": 0.705, "segm_mAP_50": 0.8094, "segm_mAP_75": 0.8043, "segm_mAP_s": 0.0047, "segm_mAP_m": 0.6105, "segm_mAP_l": 0.7779, "segm_mAP_copypaste": "0.7050 0.8094 0.8043 0.0047 0.6105 0.7779"}
{"mode": "val", "epoch": 13, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5817, "bbox_mAP_50": 0.8141, "bbox_mAP_75": 0.6424, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5809, "bbox_mAP_l": 0.634, "bbox_mAP_copypaste": "0.5817 0.8141 0.6424 0.0000 0.5809 0.6340", "segm_mAP": 0.7051, "segm_mAP_50": 0.8094, "segm_mAP_75": 0.8043, "segm_mAP_s": 0.0047, "segm_mAP_m": 0.6133, "segm_mAP_l": 0.7779, "segm_mAP_copypaste": "0.7051 0.8094 0.8043 0.0047 0.6133 0.7779"}
{"mode": "val", "epoch": 14, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5817, "bbox_mAP_50": 0.8142, "bbox_mAP_75": 0.6424, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5809, "bbox_mAP_l": 0.634, "bbox_mAP_copypaste": "0.5817 0.8142 0.6424 0.0000 0.5809 0.6340", "segm_mAP": 0.7052, "segm_mAP_50": 0.8095, "segm_mAP_75": 0.8044, "segm_mAP_s": 0.0047, "segm_mAP_m": 0.6132, "segm_mAP_l": 0.7779, "segm_mAP_copypaste": "0.7052 0.8095 0.8044 0.0047 0.6132 0.7779"}
{"mode": "val", "epoch": 15, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5816, "bbox_mAP_50": 0.814, "bbox_mAP_75": 0.6423, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5809, "bbox_mAP_l": 0.634, "bbox_mAP_copypaste": "0.5816 0.8140 0.6423 0.0000 0.5809 0.6340", "segm_mAP": 0.705, "segm_mAP_50": 0.8093, "segm_mAP_75": 0.8042, "segm_mAP_s": 0.0047, "segm_mAP_m": 0.611, "segm_mAP_l": 0.7779, "segm_mAP_copypaste": "0.7050 0.8093 0.8042 0.0047 0.6110 0.7779"}
{"mode": "val", "epoch": 16, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5817, "bbox_mAP_50": 0.814, "bbox_mAP_75": 0.6424, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5809, "bbox_mAP_l": 0.634, "bbox_mAP_copypaste": "0.5817 0.8140 0.6424 0.0000 0.5809 0.6340", "segm_mAP": 0.7051, "segm_mAP_50": 0.8094, "segm_mAP_75": 0.8042, "segm_mAP_s": 0.0047, "segm_mAP_m": 0.6133, "segm_mAP_l": 0.7779, "segm_mAP_copypaste": "0.7051 0.8094 0.8042 0.0047 0.6133 0.7779"}
{"mode": "val", "epoch": 17, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5826, "bbox_mAP_50": 0.8147, "bbox_mAP_75": 0.6445, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.581, "bbox_mAP_l": 0.634, "bbox_mAP_copypaste": "0.5826 0.8147 0.6445 0.0000 0.5810 0.6340", "segm_mAP": 0.7058, "segm_mAP_50": 0.81, "segm_mAP_75": 0.8048, "segm_mAP_s": 0.0047, "segm_mAP_m": 0.6134, "segm_mAP_l": 0.7779, "segm_mAP_copypaste": "0.7058 0.8100 0.8048 0.0047 0.6134 0.7779"}
{"mode": "val", "epoch": 18, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5826, "bbox_mAP_50": 0.8147, "bbox_mAP_75": 0.6445, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.581, "bbox_mAP_l": 0.634, "bbox_mAP_copypaste": "0.5826 0.8147 0.6445 0.0000 0.5810 0.6340", "segm_mAP": 0.7058, "segm_mAP_50": 0.81, "segm_mAP_75": 0.8049, "segm_mAP_s": 0.0047, "segm_mAP_m": 0.6134, "segm_mAP_l": 0.7779, "segm_mAP_copypaste": "0.7058 0.8100 0.8049 0.0047 0.6134 0.7779"}
{"mode": "val", "epoch": 19, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5855, "bbox_mAP_50": 0.8146, "bbox_mAP_75": 0.6445, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.581, "bbox_mAP_l": 0.6376, "bbox_mAP_copypaste": "0.5855 0.8146 0.6445 0.0000 0.5810 0.6376", "segm_mAP": 0.7058, "segm_mAP_50": 0.81, "segm_mAP_75": 0.8048, "segm_mAP_s": 0.0047, "segm_mAP_m": 0.6133, "segm_mAP_l": 0.7779, "segm_mAP_copypaste": "0.7058 0.8100 0.8048 0.0047 0.6133 0.7779"}
{"mode": "val", "epoch": 20, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5855, "bbox_mAP_50": 0.8146, "bbox_mAP_75": 0.6445, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.581, "bbox_mAP_l": 0.6376, "bbox_mAP_copypaste": "0.5855 0.8146 0.6445 0.0000 0.5810 0.6376", "segm_mAP": 0.7058, "segm_mAP_50": 0.81, "segm_mAP_75": 0.8048, "segm_mAP_s": 0.0047, "segm_mAP_m": 0.6134, "segm_mAP_l": 0.7779, "segm_mAP_copypaste": "0.7058 0.8100 0.8048 0.0047 0.6134 0.7779"}
{"mode": "val", "epoch": 21, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5855, "bbox_mAP_50": 0.8146, "bbox_mAP_75": 0.6445, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.581, "bbox_mAP_l": 0.6376, "bbox_mAP_copypaste": "0.5855 0.8146 0.6445 0.0000 0.5810 0.6376", "segm_mAP": 0.7058, "segm_mAP_50": 0.8099, "segm_mAP_75": 0.8048, "segm_mAP_s": 0.0046, "segm_mAP_m": 0.6133, "segm_mAP_l": 0.7779, "segm_mAP_copypaste": "0.7058 0.8099 0.8048 0.0046 0.6133 0.7779"}
{"mode": "val", "epoch": 22, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5854, "bbox_mAP_50": 0.8144, "bbox_mAP_75": 0.6445, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.581, "bbox_mAP_l": 0.6376, "bbox_mAP_copypaste": "0.5854 0.8144 0.6445 0.0000 0.5810 0.6376", "segm_mAP": 0.7057, "segm_mAP_50": 0.8098, "segm_mAP_75": 0.8047, "segm_mAP_s": 0.0047, "segm_mAP_m": 0.6133, "segm_mAP_l": 0.7779, "segm_mAP_copypaste": "0.7057 0.8098 0.8047 0.0047 0.6133 0.7779"}
{"mode": "val", "epoch": 23, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5855, "bbox_mAP_50": 0.8148, "bbox_mAP_75": 0.6446, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.581, "bbox_mAP_l": 0.6376, "bbox_mAP_copypaste": "0.5855 0.8148 0.6446 0.0000 0.5810 0.6376", "segm_mAP": 0.7059, "segm_mAP_50": 0.8101, "segm_mAP_75": 0.8049, "segm_mAP_s": 0.0047, "segm_mAP_m": 0.6133, "segm_mAP_l": 0.778, "segm_mAP_copypaste": "0.7059 0.8101 0.8049 0.0047 0.6133 0.7780"}
{"mode": "val", "epoch": 24, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5856, "bbox_mAP_50": 0.8149, "bbox_mAP_75": 0.6447, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.581, "bbox_mAP_l": 0.6376, "bbox_mAP_copypaste": "0.5856 0.8149 0.6447 0.0000 0.5810 0.6376", "segm_mAP": 0.706, "segm_mAP_50": 0.8102, "segm_mAP_75": 0.805, "segm_mAP_s": 0.0046, "segm_mAP_m": 0.6133, "segm_mAP_l": 0.778, "segm_mAP_copypaste": "0.7060 0.8102 0.8050 0.0046 0.6133 0.7780"}
{"mode": "val", "epoch": 25, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5857, "bbox_mAP_50": 0.815, "bbox_mAP_75": 0.6447, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5812, "bbox_mAP_l": 0.6376, "bbox_mAP_copypaste": "0.5857 0.8150 0.6447 0.0000 0.5812 0.6376", "segm_mAP": 0.706, "segm_mAP_50": 0.8103, "segm_mAP_75": 0.8051, "segm_mAP_s": 0.0046, "segm_mAP_m": 0.614, "segm_mAP_l": 0.778, "segm_mAP_copypaste": "0.7060 0.8103 0.8051 0.0046 0.6140 0.7780"}
{"mode": "val", "epoch": 26, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5857, "bbox_mAP_50": 0.815, "bbox_mAP_75": 0.6447, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5814, "bbox_mAP_l": 0.6377, "bbox_mAP_copypaste": "0.5857 0.8150 0.6447 0.0000 0.5814 0.6377", "segm_mAP": 0.7061, "segm_mAP_50": 0.8103, "segm_mAP_75": 0.8051, "segm_mAP_s": 0.0046, "segm_mAP_m": 0.6169, "segm_mAP_l": 0.7779, "segm_mAP_copypaste": "0.7061 0.8103 0.8051 0.0046 0.6169 0.7779"}
{"mode": "val", "epoch": 27, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5857, "bbox_mAP_50": 0.815, "bbox_mAP_75": 0.6447, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5812, "bbox_mAP_l": 0.6377, "bbox_mAP_copypaste": "0.5857 0.8150 0.6447 0.0000 0.5812 0.6377", "segm_mAP": 0.7061, "segm_mAP_50": 0.8103, "segm_mAP_75": 0.8051, "segm_mAP_s": 0.0046, "segm_mAP_m": 0.6169, "segm_mAP_l": 0.7779, "segm_mAP_copypaste": "0.7061 0.8103 0.8051 0.0046 0.6169 0.7779"}
{"mode": "val", "epoch": 28, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5856, "bbox_mAP_50": 0.8149, "bbox_mAP_75": 0.6447, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5798, "bbox_mAP_l": 0.6377, "bbox_mAP_copypaste": "0.5856 0.8149 0.6447 0.0000 0.5798 0.6377", "segm_mAP": 0.706, "segm_mAP_50": 0.8101, "segm_mAP_75": 0.8049, "segm_mAP_s": 0.0046, "segm_mAP_m": 0.6154, "segm_mAP_l": 0.778, "segm_mAP_copypaste": "0.7060 0.8101 0.8049 0.0046 0.6154 0.7780"}
{"mode": "val", "epoch": 29, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5857, "bbox_mAP_50": 0.8149, "bbox_mAP_75": 0.6447, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.58, "bbox_mAP_l": 0.6377, "bbox_mAP_copypaste": "0.5857 0.8149 0.6447 0.0000 0.5800 0.6377", "segm_mAP": 0.706, "segm_mAP_50": 0.8102, "segm_mAP_75": 0.805, "segm_mAP_s": 0.0046, "segm_mAP_m": 0.6157, "segm_mAP_l": 0.778, "segm_mAP_copypaste": "0.7060 0.8102 0.8050 0.0046 0.6157 0.7780"}
{"mode": "val", "epoch": 30, "iter": 13, "lr": 0.0, "bbox_mAP": 0.5856, "bbox_mAP_50": 0.8149, "bbox_mAP_75": 0.6447, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5798, "bbox_mAP_l": 0.6377, "bbox_mAP_copypaste": "0.5856 0.8149 0.6447 0.0000 0.5798 0.6377", "segm_mAP": 0.706, "segm_mAP_50": 0.8101, "segm_mAP_75": 0.8049, "segm_mAP_s": 0.0047, "segm_mAP_m": 0.6154, "segm_mAP_l": 0.778, "segm_mAP_copypaste": "0.7060 0.8101 0.8049 0.0047 0.6154 0.7780"}
