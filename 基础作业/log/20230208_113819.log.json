{"env_info": "sys.platform: linux\nPython: 3.10.9 (main, Jan 11 2023, 15:21:40) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce GTX 1080 Ti\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0\nPyTorch: 1.12.1+cu102\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70\n  - CuDNN 7.6.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cu102\nOpenCV: 4.6.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.28.0+1b7d778", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'dataset/balloon'\nCLASSES = ('balloon', )\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=1,\n    train=dict(\n        type='CocoDataset',\n        ann_file='dataset/balloon/train/train.json',\n        img_prefix='dataset/balloon/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='dataset/balloon/val/val.json',\n        img_prefix='dataset/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='dataset/balloon/val/val.json',\n        img_prefix='dataset/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=10)\ncheckpoint_config = dict(interval=2)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained/mask_rcnn_r50_fpn_1x_coco_20200205-d4b0c5d6.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = 'new_mrcnn'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1208830379, "exp_name": "mask_rcnn_r50_fpn_1x_ballon.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00062, "bbox_mAP": 0.0908, "bbox_mAP_50": 0.139, "bbox_mAP_75": 0.0971, "bbox_mAP_s": 0.0029, "bbox_mAP_m": 0.1269, "bbox_mAP_l": 0.1279, "bbox_mAP_copypaste": "0.0908 0.1390 0.0971 0.0029 0.1269 0.1279", "segm_mAP": 0.1105, "segm_mAP_50": 0.139, "segm_mAP_75": 0.1267, "segm_mAP_s": 0.0009, "segm_mAP_m": 0.0789, "segm_mAP_l": 0.3793, "segm_mAP_copypaste": "0.1105 0.1390 0.1267 0.0009 0.0789 0.3793"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00126, "bbox_mAP": 0.6383, "bbox_mAP_50": 0.8583, "bbox_mAP_75": 0.8296, "bbox_mAP_s": 0.0126, "bbox_mAP_m": 0.6127, "bbox_mAP_l": 0.6851, "bbox_mAP_copypaste": "0.6383 0.8583 0.8296 0.0126 0.6127 0.6851", "segm_mAP": 0.7342, "segm_mAP_50": 0.8538, "segm_mAP_75": 0.811, "segm_mAP_s": 0.02, "segm_mAP_m": 0.6643, "segm_mAP_l": 0.7919, "segm_mAP_copypaste": "0.7342 0.8538 0.8110 0.0200 0.6643 0.7919"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.0019, "bbox_mAP": 0.6915, "bbox_mAP_50": 0.859, "bbox_mAP_75": 0.8097, "bbox_mAP_s": 0.0563, "bbox_mAP_m": 0.6506, "bbox_mAP_l": 0.7364, "bbox_mAP_copypaste": "0.6915 0.8590 0.8097 0.0563 0.6506 0.7364", "segm_mAP": 0.7636, "segm_mAP_50": 0.8545, "segm_mAP_75": 0.8434, "segm_mAP_s": 0.0586, "segm_mAP_m": 0.6709, "segm_mAP_l": 0.828, "segm_mAP_copypaste": "0.7636 0.8545 0.8434 0.0586 0.6709 0.8280"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00254, "bbox_mAP": 0.6795, "bbox_mAP_50": 0.8852, "bbox_mAP_75": 0.8515, "bbox_mAP_s": 0.065, "bbox_mAP_m": 0.6045, "bbox_mAP_l": 0.7319, "bbox_mAP_copypaste": "0.6795 0.8852 0.8515 0.0650 0.6045 0.7319", "segm_mAP": 0.7778, "segm_mAP_50": 0.8852, "segm_mAP_75": 0.872, "segm_mAP_s": 0.0616, "segm_mAP_m": 0.7015, "segm_mAP_l": 0.8298, "segm_mAP_copypaste": "0.7778 0.8852 0.8720 0.0616 0.7015 0.8298"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00318, "bbox_mAP": 0.7475, "bbox_mAP_50": 0.8995, "bbox_mAP_75": 0.8625, "bbox_mAP_s": 0.0252, "bbox_mAP_m": 0.7078, "bbox_mAP_l": 0.7939, "bbox_mAP_copypaste": "0.7475 0.8995 0.8625 0.0252 0.7078 0.7939", "segm_mAP": 0.8026, "segm_mAP_50": 0.8886, "segm_mAP_75": 0.8832, "segm_mAP_s": 0.0168, "segm_mAP_m": 0.7329, "segm_mAP_l": 0.8623, "segm_mAP_copypaste": "0.8026 0.8886 0.8832 0.0168 0.7329 0.8623"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00382, "bbox_mAP": 0.774, "bbox_mAP_50": 0.9175, "bbox_mAP_75": 0.8894, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.7407, "bbox_mAP_l": 0.8217, "bbox_mAP_copypaste": "0.7740 0.9175 0.8894 0.1010 0.7407 0.8217", "segm_mAP": 0.7941, "segm_mAP_50": 0.8896, "segm_mAP_75": 0.8896, "segm_mAP_s": 0.101, "segm_mAP_m": 0.6831, "segm_mAP_l": 0.8565, "segm_mAP_copypaste": "0.7941 0.8896 0.8896 0.1010 0.6831 0.8565"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00446, "bbox_mAP": 0.7426, "bbox_mAP_50": 0.9085, "bbox_mAP_75": 0.8809, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.6971, "bbox_mAP_l": 0.7954, "bbox_mAP_copypaste": "0.7426 0.9085 0.8809 0.0505 0.6971 0.7954", "segm_mAP": 0.8017, "segm_mAP_50": 0.9085, "segm_mAP_75": 0.8797, "segm_mAP_s": 0.1515, "segm_mAP_m": 0.6988, "segm_mAP_l": 0.8632, "segm_mAP_copypaste": "0.8017 0.9085 0.8797 0.1515 0.6988 0.8632"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00509, "bbox_mAP": 0.7579, "bbox_mAP_50": 0.9108, "bbox_mAP_75": 0.8603, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.7146, "bbox_mAP_l": 0.8055, "bbox_mAP_copypaste": "0.7579 0.9108 0.8603 0.0505 0.7146 0.8055", "segm_mAP": 0.7997, "segm_mAP_50": 0.9155, "segm_mAP_75": 0.8802, "segm_mAP_s": 0.2525, "segm_mAP_m": 0.7, "segm_mAP_l": 0.8563, "segm_mAP_copypaste": "0.7997 0.9155 0.8802 0.2525 0.7000 0.8563"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.00057, "bbox_mAP": 0.773, "bbox_mAP_50": 0.9203, "bbox_mAP_75": 0.8609, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.7643, "bbox_mAP_l": 0.8094, "bbox_mAP_copypaste": "0.7730 0.9203 0.8609 0.0505 0.7643 0.8094", "segm_mAP": 0.7919, "segm_mAP_50": 0.8931, "segm_mAP_75": 0.8826, "segm_mAP_s": 0.202, "segm_mAP_m": 0.7044, "segm_mAP_l": 0.8487, "segm_mAP_copypaste": "0.7919 0.8931 0.8826 0.2020 0.7044 0.8487"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00064, "bbox_mAP": 0.7659, "bbox_mAP_50": 0.9182, "bbox_mAP_75": 0.8789, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.7373, "bbox_mAP_l": 0.809, "bbox_mAP_copypaste": "0.7659 0.9182 0.8789 0.1010 0.7373 0.8090", "segm_mAP": 0.809, "segm_mAP_50": 0.9182, "segm_mAP_75": 0.8789, "segm_mAP_s": 0.1515, "segm_mAP_m": 0.7145, "segm_mAP_l": 0.8707, "segm_mAP_copypaste": "0.8090 0.9182 0.8789 0.1515 0.7145 0.8707"}
