{"mmdet_version": "2.28.1c14dd6c", "CLASSES": ["aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"], "env_info": "sys.platform: linux\nPython: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-11.1\nNVCC: Cuda compilation tools, release 11.1, V11.1.74\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.12.1+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.4  (built against CUDA 11.1)\n    - Built with CuDNN 8.3.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cu113\nOpenCV: 4.5.5\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.28.1+c14dd6c", "config": "model = dict(\n    type='RetinaNet',\n    backbone=dict(\n        type='EfficientNet',\n        arch='b3',\n        drop_path_rate=0.2,\n        out_indices=(3, 4, 5),\n        frozen_stages=0,\n        norm_cfg=dict(\n            type='SyncBN', requires_grad=True, eps=0.001, momentum=0.01),\n        norm_eval=False,\n        init_cfg=dict(\n            type='Pretrained',\n            prefix='backbone',\n            checkpoint=\n            'https://download.openmmlab.com/mmclassification/v0/efficientnet/efficientnet-b3_3rdparty_8xb32-aa_in1k_20220119-5b4887a0.pth'\n        )),\n    neck=dict(\n        type='FPN',\n        in_channels=[48, 136, 384],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs='on_input',\n        num_outs=5,\n        relu_before_extra_convs=True,\n        no_norm_on_lateral=True,\n        norm_cfg=dict(type='BN', requires_grad=True)),\n    bbox_head=dict(\n        type='RetinaSepBNHead',\n        num_classes=20,\n        in_channels=256,\n        stacked_convs=4,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            octave_base_scale=4,\n            scales_per_octave=3,\n            ratios=[0.5, 1.0, 2.0],\n            strides=[8, 16, 32, 64, 128]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0),\n        num_ins=5,\n        norm_cfg=dict(type='BN', requires_grad=True)),\n    train_cfg=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0,\n            ignore_iof_thr=-1),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'VOCDataset'\ndata_root = 'data/VOCdevkit/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Resize',\n        img_scale=(896, 896),\n        ratio_range=(0.8, 1.2),\n        keep_ratio=True),\n    dict(type='RandomCrop', crop_size=(896, 896)),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(896, 896)),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(896, 896),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(896, 896)),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='RepeatDataset',\n        times=2,\n        dataset=dict(\n            type='VOCDataset',\n            ann_file=[\n                'data/VOCdevkit/VOC2007/ImageSets/Main/trainval.txt',\n                'data/VOCdevkit/VOC2012/ImageSets/Main/trainval.txt'\n            ],\n            img_prefix=['data/VOCdevkit/VOC2007/', 'data/VOCdevkit/VOC2012/'],\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', with_bbox=True),\n                dict(type='Resize', img_scale=(1000, 600), keep_ratio=True),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size_divisor=32),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n            ]),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(\n                type='Resize',\n                img_scale=(896, 896),\n                ratio_range=(0.8, 1.2),\n                keep_ratio=True),\n            dict(type='RandomCrop', crop_size=(896, 896)),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(896, 896)),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ]),\n    val=dict(\n        type='VOCDataset',\n        ann_file='data/VOCdevkit/VOC2007/ImageSets/Main/test.txt',\n        img_prefix='data/VOCdevkit/VOC2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(896, 896),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size=(896, 896)),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='VOCDataset',\n        ann_file='data/VOCdevkit/VOC2007/ImageSets/Main/test.txt',\n        img_prefix='data/VOCdevkit/VOC2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(896, 896),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size=(896, 896)),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='mAP')\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'pretrained/retinanet_effb3_fpn_crop896_8x4_1x_coco_20220322_234806-615a0dda.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=32)\ncudnn_benchmark = True\nnorm_cfg = dict(type='BN', requires_grad=True)\nimg_size = (896, 896)\noptimizer_config = dict(grad_clip=None)\noptimizer = dict(\n    type='SGD',\n    lr=0.002,\n    momentum=0.9,\n    weight_decay=0.0001,\n    paramwise_cfg=dict(norm_decay_mult=0, bypass_duplicate=True))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=100,\n    warmup_ratio=0.1,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=5)\nwork_dir = 'effnet_voc/'\nauto_resume = False\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "retinanet_effb3_fpn_crop896_8x4_1x_voc.py", "epoch": 4, "iter": 16556, "mmcv_version": "1.7.1", "time": "Wed Feb  8 07:56:41 2023", "hook_msgs": {"last_ckpt": "/media/ders/mazhiming/mmdetection/effnet_voc/epoch_3.pth"}}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.002, "memory": 19912, "data_time": 0.05897, "loss_cls": 0.12388, "loss_bbox": 0.13045, "loss": 0.25433, "time": 1.62606}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.002, "memory": 19912, "data_time": 0.00802, "loss_cls": 0.13199, "loss_bbox": 0.13922, "loss": 0.27121, "time": 0.43817}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.002, "memory": 19912, "data_time": 0.00797, "loss_cls": 0.12588, "loss_bbox": 0.13693, "loss": 0.26281, "time": 0.49783}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.002, "memory": 19912, "data_time": 0.00794, "loss_cls": 0.13463, "loss_bbox": 0.14047, "loss": 0.2751, "time": 0.34707}
{"mode": "train", "epoch": 5, "iter": 250, "lr": 0.002, "memory": 19912, "data_time": 0.01252, "loss_cls": 0.13661, "loss_bbox": 0.14664, "loss": 0.28325, "time": 0.43739}
{"mode": "train", "epoch": 5, "iter": 300, "lr": 0.002, "memory": 19912, "data_time": 0.01221, "loss_cls": 0.13248, "loss_bbox": 0.14528, "loss": 0.27776, "time": 0.51943}
{"mode": "train", "epoch": 5, "iter": 350, "lr": 0.002, "memory": 19912, "data_time": 0.00854, "loss_cls": 0.12941, "loss_bbox": 0.13105, "loss": 0.26046, "time": 0.3764}
{"mode": "train", "epoch": 5, "iter": 400, "lr": 0.002, "memory": 19912, "data_time": 0.00823, "loss_cls": 0.13714, "loss_bbox": 0.14458, "loss": 0.28172, "time": 0.42697}
{"mode": "train", "epoch": 5, "iter": 450, "lr": 0.002, "memory": 19912, "data_time": 0.00829, "loss_cls": 0.13618, "loss_bbox": 0.14117, "loss": 0.27735, "time": 0.33989}
{"mode": "train", "epoch": 5, "iter": 500, "lr": 0.002, "memory": 19912, "data_time": 0.0084, "loss_cls": 0.12547, "loss_bbox": 0.13333, "loss": 0.2588, "time": 0.40716}
{"mode": "train", "epoch": 5, "iter": 550, "lr": 0.002, "memory": 19912, "data_time": 0.00787, "loss_cls": 0.13002, "loss_bbox": 0.1365, "loss": 0.26652, "time": 0.34483}
{"mode": "train", "epoch": 5, "iter": 600, "lr": 0.002, "memory": 19912, "data_time": 0.01117, "loss_cls": 0.12665, "loss_bbox": 0.1322, "loss": 0.25885, "time": 0.39688}
{"mode": "train", "epoch": 5, "iter": 650, "lr": 0.002, "memory": 19912, "data_time": 0.01255, "loss_cls": 0.12424, "loss_bbox": 0.13009, "loss": 0.25434, "time": 0.39745}
{"mode": "train", "epoch": 5, "iter": 700, "lr": 0.002, "memory": 19912, "data_time": 0.01283, "loss_cls": 0.13289, "loss_bbox": 0.13668, "loss": 0.26957, "time": 0.38064}
{"mode": "train", "epoch": 5, "iter": 750, "lr": 0.002, "memory": 19912, "data_time": 0.00885, "loss_cls": 0.13421, "loss_bbox": 0.13513, "loss": 0.26934, "time": 0.36496}
{"mode": "train", "epoch": 5, "iter": 800, "lr": 0.002, "memory": 19912, "data_time": 0.00819, "loss_cls": 0.13283, "loss_bbox": 0.13795, "loss": 0.27078, "time": 0.34858}
{"mode": "train", "epoch": 5, "iter": 850, "lr": 0.002, "memory": 19912, "data_time": 0.00776, "loss_cls": 0.12553, "loss_bbox": 0.13228, "loss": 0.25781, "time": 0.3471}
{"mode": "train", "epoch": 5, "iter": 900, "lr": 0.002, "memory": 19912, "data_time": 0.00825, "loss_cls": 0.12261, "loss_bbox": 0.12995, "loss": 0.25256, "time": 0.35193}
{"mode": "train", "epoch": 5, "iter": 950, "lr": 0.002, "memory": 19912, "data_time": 0.01035, "loss_cls": 0.12827, "loss_bbox": 0.14077, "loss": 0.26905, "time": 0.3663}
{"mode": "train", "epoch": 5, "iter": 1000, "lr": 0.002, "memory": 19912, "data_time": 0.01407, "loss_cls": 0.13546, "loss_bbox": 0.14147, "loss": 0.27693, "time": 0.41694}
{"mode": "train", "epoch": 5, "iter": 1050, "lr": 0.002, "memory": 19912, "data_time": 0.01455, "loss_cls": 0.1386, "loss_bbox": 0.14402, "loss": 0.28262, "time": 0.40491}
{"mode": "train", "epoch": 5, "iter": 1100, "lr": 0.002, "memory": 19912, "data_time": 0.01124, "loss_cls": 0.13306, "loss_bbox": 0.14054, "loss": 0.2736, "time": 0.37954}
{"mode": "train", "epoch": 5, "iter": 1150, "lr": 0.002, "memory": 19912, "data_time": 0.00892, "loss_cls": 0.13025, "loss_bbox": 0.13018, "loss": 0.26042, "time": 0.36044}
{"mode": "train", "epoch": 5, "iter": 1200, "lr": 0.002, "memory": 19912, "data_time": 0.00841, "loss_cls": 0.13434, "loss_bbox": 0.1304, "loss": 0.26473, "time": 0.34981}
{"mode": "train", "epoch": 5, "iter": 1250, "lr": 0.002, "memory": 19912, "data_time": 0.00821, "loss_cls": 0.13761, "loss_bbox": 0.14288, "loss": 0.2805, "time": 0.34497}
{"mode": "train", "epoch": 5, "iter": 1300, "lr": 0.002, "memory": 19912, "data_time": 0.0083, "loss_cls": 0.12922, "loss_bbox": 0.13219, "loss": 0.2614, "time": 0.34986}
{"mode": "train", "epoch": 5, "iter": 1350, "lr": 0.002, "memory": 19912, "data_time": 0.00888, "loss_cls": 0.13262, "loss_bbox": 0.14295, "loss": 0.27557, "time": 0.35928}
{"mode": "train", "epoch": 5, "iter": 1400, "lr": 0.002, "memory": 19912, "data_time": 0.01504, "loss_cls": 0.1347, "loss_bbox": 0.13987, "loss": 0.27457, "time": 0.42723}
{"mode": "train", "epoch": 5, "iter": 1450, "lr": 0.002, "memory": 19912, "data_time": 0.01377, "loss_cls": 0.12494, "loss_bbox": 0.12933, "loss": 0.25427, "time": 0.43095}
{"mode": "train", "epoch": 5, "iter": 1500, "lr": 0.002, "memory": 19912, "data_time": 0.01357, "loss_cls": 0.12593, "loss_bbox": 0.13883, "loss": 0.26476, "time": 0.40223}
{"mode": "train", "epoch": 5, "iter": 1550, "lr": 0.002, "memory": 19912, "data_time": 0.00859, "loss_cls": 0.13521, "loss_bbox": 0.14206, "loss": 0.27727, "time": 0.37491}
{"mode": "train", "epoch": 5, "iter": 1600, "lr": 0.002, "memory": 19912, "data_time": 0.00792, "loss_cls": 0.12353, "loss_bbox": 0.12813, "loss": 0.25166, "time": 0.34234}
{"mode": "train", "epoch": 5, "iter": 1650, "lr": 0.002, "memory": 19912, "data_time": 0.00807, "loss_cls": 0.1264, "loss_bbox": 0.13088, "loss": 0.25728, "time": 0.34781}
{"mode": "train", "epoch": 5, "iter": 1700, "lr": 0.002, "memory": 19912, "data_time": 0.00829, "loss_cls": 0.12932, "loss_bbox": 0.13509, "loss": 0.26441, "time": 0.35155}
{"mode": "train", "epoch": 5, "iter": 1750, "lr": 0.002, "memory": 19912, "data_time": 0.00954, "loss_cls": 0.12534, "loss_bbox": 0.13392, "loss": 0.25927, "time": 0.36011}
{"mode": "train", "epoch": 5, "iter": 1800, "lr": 0.002, "memory": 19912, "data_time": 0.0138, "loss_cls": 0.12558, "loss_bbox": 0.13327, "loss": 0.25885, "time": 0.41313}
{"mode": "train", "epoch": 5, "iter": 1850, "lr": 0.002, "memory": 19912, "data_time": 0.01623, "loss_cls": 0.13329, "loss_bbox": 0.13982, "loss": 0.2731, "time": 0.43462}
{"mode": "train", "epoch": 5, "iter": 1900, "lr": 0.002, "memory": 19912, "data_time": 0.01356, "loss_cls": 0.12949, "loss_bbox": 0.14024, "loss": 0.26973, "time": 0.42683}
{"mode": "train", "epoch": 5, "iter": 1950, "lr": 0.002, "memory": 19912, "data_time": 0.00945, "loss_cls": 0.12501, "loss_bbox": 0.13185, "loss": 0.25686, "time": 0.37049}
{"mode": "train", "epoch": 5, "iter": 2000, "lr": 0.002, "memory": 19912, "data_time": 0.0086, "loss_cls": 0.12662, "loss_bbox": 0.13373, "loss": 0.26035, "time": 0.35161}
{"mode": "train", "epoch": 5, "iter": 2050, "lr": 0.002, "memory": 19912, "data_time": 0.00835, "loss_cls": 0.13072, "loss_bbox": 0.13791, "loss": 0.26863, "time": 0.35057}
{"mode": "train", "epoch": 5, "iter": 2100, "lr": 0.002, "memory": 19912, "data_time": 0.00819, "loss_cls": 0.13113, "loss_bbox": 0.14334, "loss": 0.27447, "time": 0.3412}
{"mode": "train", "epoch": 5, "iter": 2150, "lr": 0.002, "memory": 19912, "data_time": 0.00897, "loss_cls": 0.1297, "loss_bbox": 0.13243, "loss": 0.26213, "time": 0.34635}
{"mode": "train", "epoch": 5, "iter": 2200, "lr": 0.002, "memory": 19912, "data_time": 0.01171, "loss_cls": 0.12242, "loss_bbox": 0.12892, "loss": 0.25133, "time": 0.39946}
{"mode": "train", "epoch": 5, "iter": 2250, "lr": 0.002, "memory": 19912, "data_time": 0.01719, "loss_cls": 0.12254, "loss_bbox": 0.1279, "loss": 0.25045, "time": 0.46732}
{"mode": "train", "epoch": 5, "iter": 2300, "lr": 0.002, "memory": 19912, "data_time": 0.0142, "loss_cls": 0.12221, "loss_bbox": 0.12751, "loss": 0.24972, "time": 0.49255}
{"mode": "train", "epoch": 5, "iter": 2350, "lr": 0.002, "memory": 19912, "data_time": 0.01176, "loss_cls": 0.12983, "loss_bbox": 0.14026, "loss": 0.27009, "time": 0.45177}
{"mode": "train", "epoch": 5, "iter": 2400, "lr": 0.002, "memory": 19912, "data_time": 0.00897, "loss_cls": 0.12932, "loss_bbox": 0.13605, "loss": 0.26537, "time": 0.35523}
{"mode": "train", "epoch": 5, "iter": 2450, "lr": 0.002, "memory": 19912, "data_time": 0.00846, "loss_cls": 0.13104, "loss_bbox": 0.13909, "loss": 0.27013, "time": 0.34798}
{"mode": "train", "epoch": 5, "iter": 2500, "lr": 0.002, "memory": 19912, "data_time": 0.00859, "loss_cls": 0.12537, "loss_bbox": 0.13521, "loss": 0.26058, "time": 0.34936}
{"mode": "train", "epoch": 5, "iter": 2550, "lr": 0.002, "memory": 19912, "data_time": 0.00924, "loss_cls": 0.12731, "loss_bbox": 0.13345, "loss": 0.26075, "time": 0.35256}
{"mode": "train", "epoch": 5, "iter": 2600, "lr": 0.002, "memory": 19912, "data_time": 0.00983, "loss_cls": 0.13089, "loss_bbox": 0.13401, "loss": 0.26491, "time": 0.37555}
{"mode": "train", "epoch": 5, "iter": 2650, "lr": 0.002, "memory": 19912, "data_time": 0.01456, "loss_cls": 0.13612, "loss_bbox": 0.1317, "loss": 0.26782, "time": 0.42879}
{"mode": "train", "epoch": 5, "iter": 2700, "lr": 0.002, "memory": 19912, "data_time": 0.01533, "loss_cls": 0.12505, "loss_bbox": 0.13572, "loss": 0.26078, "time": 0.43773}
{"mode": "train", "epoch": 5, "iter": 2750, "lr": 0.002, "memory": 19912, "data_time": 0.01432, "loss_cls": 0.12743, "loss_bbox": 0.13317, "loss": 0.2606, "time": 0.41866}
{"mode": "train", "epoch": 5, "iter": 2800, "lr": 0.002, "memory": 19912, "data_time": 0.00957, "loss_cls": 0.13106, "loss_bbox": 0.14317, "loss": 0.27423, "time": 0.36139}
{"mode": "train", "epoch": 5, "iter": 2850, "lr": 0.002, "memory": 19912, "data_time": 0.00815, "loss_cls": 0.127, "loss_bbox": 0.13288, "loss": 0.25988, "time": 0.3425}
{"mode": "train", "epoch": 5, "iter": 2900, "lr": 0.002, "memory": 19912, "data_time": 0.00768, "loss_cls": 0.13262, "loss_bbox": 0.13862, "loss": 0.27124, "time": 0.34069}
{"mode": "train", "epoch": 5, "iter": 2950, "lr": 0.002, "memory": 19912, "data_time": 0.00775, "loss_cls": 0.12504, "loss_bbox": 0.1325, "loss": 0.25754, "time": 0.35134}
{"mode": "train", "epoch": 5, "iter": 3000, "lr": 0.002, "memory": 19912, "data_time": 0.00833, "loss_cls": 0.12992, "loss_bbox": 0.13672, "loss": 0.26664, "time": 0.35559}
{"mode": "train", "epoch": 5, "iter": 3050, "lr": 0.002, "memory": 19912, "data_time": 0.01481, "loss_cls": 0.12776, "loss_bbox": 0.14006, "loss": 0.26782, "time": 0.43424}
{"mode": "train", "epoch": 5, "iter": 3100, "lr": 0.002, "memory": 19912, "data_time": 0.01523, "loss_cls": 0.1277, "loss_bbox": 0.13887, "loss": 0.26657, "time": 0.46296}
{"mode": "train", "epoch": 5, "iter": 3150, "lr": 0.002, "memory": 19912, "data_time": 0.01439, "loss_cls": 0.1261, "loss_bbox": 0.13843, "loss": 0.26452, "time": 0.42924}
{"mode": "train", "epoch": 5, "iter": 3200, "lr": 0.002, "memory": 19912, "data_time": 0.01034, "loss_cls": 0.12825, "loss_bbox": 0.13325, "loss": 0.2615, "time": 0.36751}
{"mode": "train", "epoch": 5, "iter": 3250, "lr": 0.002, "memory": 19912, "data_time": 0.00836, "loss_cls": 0.12659, "loss_bbox": 0.1316, "loss": 0.25819, "time": 0.34317}
{"mode": "train", "epoch": 5, "iter": 3300, "lr": 0.002, "memory": 19912, "data_time": 0.00804, "loss_cls": 0.12734, "loss_bbox": 0.13612, "loss": 0.26346, "time": 0.33869}
{"mode": "train", "epoch": 5, "iter": 3350, "lr": 0.002, "memory": 19912, "data_time": 0.00842, "loss_cls": 0.12478, "loss_bbox": 0.13016, "loss": 0.25494, "time": 0.34639}
{"mode": "train", "epoch": 5, "iter": 3400, "lr": 0.002, "memory": 19912, "data_time": 0.00824, "loss_cls": 0.12692, "loss_bbox": 0.13728, "loss": 0.2642, "time": 0.34273}
{"mode": "train", "epoch": 5, "iter": 3450, "lr": 0.002, "memory": 19912, "data_time": 0.01031, "loss_cls": 0.12047, "loss_bbox": 0.12482, "loss": 0.24528, "time": 0.37677}
{"mode": "train", "epoch": 5, "iter": 3500, "lr": 0.002, "memory": 19912, "data_time": 0.01678, "loss_cls": 0.12925, "loss_bbox": 0.13771, "loss": 0.26695, "time": 0.46609}
{"mode": "train", "epoch": 5, "iter": 3550, "lr": 0.002, "memory": 19912, "data_time": 0.01359, "loss_cls": 0.1313, "loss_bbox": 0.14627, "loss": 0.27757, "time": 0.44495}
{"mode": "train", "epoch": 5, "iter": 3600, "lr": 0.002, "memory": 19912, "data_time": 0.01325, "loss_cls": 0.12402, "loss_bbox": 0.13192, "loss": 0.25594, "time": 0.4112}
{"mode": "train", "epoch": 5, "iter": 3650, "lr": 0.002, "memory": 19912, "data_time": 0.01018, "loss_cls": 0.12828, "loss_bbox": 0.13704, "loss": 0.26532, "time": 0.37236}
{"mode": "train", "epoch": 5, "iter": 3700, "lr": 0.002, "memory": 19912, "data_time": 0.01153, "loss_cls": 0.12474, "loss_bbox": 0.135, "loss": 0.25974, "time": 0.38879}
{"mode": "train", "epoch": 5, "iter": 3750, "lr": 0.002, "memory": 19912, "data_time": 0.01596, "loss_cls": 0.12312, "loss_bbox": 0.1345, "loss": 0.25763, "time": 0.40098}
{"mode": "train", "epoch": 5, "iter": 3800, "lr": 0.002, "memory": 19912, "data_time": 0.01206, "loss_cls": 0.12637, "loss_bbox": 0.13592, "loss": 0.26229, "time": 0.38632}
{"mode": "train", "epoch": 5, "iter": 3850, "lr": 0.002, "memory": 19912, "data_time": 0.00928, "loss_cls": 0.12871, "loss_bbox": 0.13479, "loss": 0.2635, "time": 0.3576}
{"mode": "train", "epoch": 5, "iter": 3900, "lr": 0.002, "memory": 19912, "data_time": 0.01398, "loss_cls": 0.13053, "loss_bbox": 0.14076, "loss": 0.27129, "time": 0.44235}
{"mode": "train", "epoch": 5, "iter": 3950, "lr": 0.002, "memory": 19912, "data_time": 0.01915, "loss_cls": 0.12707, "loss_bbox": 0.13677, "loss": 0.26384, "time": 0.48576}
{"mode": "train", "epoch": 5, "iter": 4000, "lr": 0.002, "memory": 19912, "data_time": 0.01854, "loss_cls": 0.13037, "loss_bbox": 0.13897, "loss": 0.26934, "time": 0.47132}
{"mode": "train", "epoch": 5, "iter": 4050, "lr": 0.002, "memory": 19912, "data_time": 0.01337, "loss_cls": 0.1309, "loss_bbox": 0.13615, "loss": 0.26705, "time": 0.42646}
{"mode": "train", "epoch": 5, "iter": 4100, "lr": 0.002, "memory": 19912, "data_time": 0.01089, "loss_cls": 0.12392, "loss_bbox": 0.13928, "loss": 0.2632, "time": 0.37522}
{"mode": "val", "epoch": 5, "iter": 2476, "lr": 0.002, "mAP": 0.844, "AP50": 0.844}
